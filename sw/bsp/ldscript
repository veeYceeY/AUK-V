

ENTRY(_start)

MEMORY
{
	RAM (rwx): ORIGIN = 0x00800000, LENGTH = 0x000001FC
	ROM (rx) : ORIGIN = 0x00010018, LENGTH = 0x00001020
}

SECTIONS
{
	.text :
	{
		*(.init)
		*(.text*)
		__text_end = .;
		*(.rodata*)
	} > ROM

	.data : AT(ADDR(.text) + SIZEOF(.text))
	{
		__data_begin = .;
		*(.data*)
		*(.eh_frame*)
		__data_end = ALIGN(4);
	} > RAM

	.bss ALIGN(4) :
	{
		__bss_begin = .;
		*(.bss*)
		*(.sbss)
		__bss_end = ALIGN(4);
	} > RAM

	/* Use the top of RAM and downwards for the stack: */
	__stack_top = 0x00000000;

	/DISCARD/ :
	{
		*(.comment)
	}
}














/*MEMORY
{
     The firmware loads our raw assembly into memory
     * at address 0x8000 and then jumps to it.
     *
     * We must tell that to the linker so that it can do relocation correctly.
    
    ram : ORIGIN = 0x00010018, LENGTH = 0x1020
}

SECTIONS
{
     .text must be the first thing inside the ram at 0x8000,
     * as that is the first thing that is executed.
     *
     * We must give start.o to the linker on the command line before main.o
     * to ensure that _start is the first thing in the output.
     
    .text : { *(.text*) } > ram
    .bss : { *(.bss*) } > ram
}
 */



